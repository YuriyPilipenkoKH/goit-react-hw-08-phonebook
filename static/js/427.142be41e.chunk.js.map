{"version":3,"file":"static/js/427.142be41e.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/section/Section.styled.jsx","components/section/Section.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.jsx","utils/notifier.js","components/ContactList/ContactList.jsx","components/ListBar/ListBar.styled.jsx","components/ListBar/ListBar.jsx","pages/Phonebook.jsx"],"sourcesContent":["import styled, { css} from 'styled-components';\n\nconst baseLiStyles = css`\n  \n    font-family: inherit;\n    font-size: 16px;\n    line-height: 17px;\n    font-weight: 600;\n    display: inline-flex;\n    align-items: center;\n    gap: 12px;\n    padding: 8px 16px;\n\n    height: 40px;\n    color: var(--black);\n    background-color: var(--yellow);\n    border:  transparent;\n    border-radius: 10px;\n    box-shadow: var(--shadow-four);\n`;\nexport default baseLiStyles\n\nexport const myRippleStyles = `\nposition: relative;\noverflow: hidden;\n       \n&:active {\n  transform: scale(0.98);\n}\n\n&:after {\n  content: '';\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n  background-image: radial-gradient(circle, #2b02a5 10%, transparent 10.01%);\n  background-repeat: no-repeat;\n  background-position: 50%;\n  transform: scale(10, 10);\n  opacity: 0;\n  transition: transform 0.4s, opacity 1s;\n}\n\n&:active:after {\n  transform: scale(0, 0);\n  opacity: 0.3;\n  transition: 0s;\n}\n`\n\n\nexport const Input = styled.input`\n  height: 40px;\n  width: 280px;\n  border-radius: 10px;\n  padding:4px 16px;\n  background-color: var(--field-color);\n  border: var(--border);\n  box-shadow: var(--shadow-four);\n  transition: background-color 1s ease-in-out, border 1s ease-in-out;\n\n  &:hover,\n  &:active,\n  &:focus-visible {\n   \n    outline: 3px solid var(--orange);\n    border: 3px solid transparent;\n    box-shadow: var(--shadow-two);\n    transition:  0.4s ease-in-out;\n  }\n\n  &:disabled {\n    background-color: var(--field-color) !important;\n    border: none;\n    outline: none;\n    cursor: none;\n\n    &:hover {\n      box-shadow: var(--shadow-four);\n    }\n  }\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n\n`;\n\n\nexport const Label = styled.label`\nposition: relative;\n  font-size: 18px;\n  font-weight: 500;\n  color:  var(--text-color);\n  transition:  color 1s ease-in-out;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\n\nexport const ContactFormBtn = styled.button`\n  position: relative;\n  overflow: hidden;\n  ${baseLiStyles};\n\n  width: 180px;\n justify-content: space-between; \n  /* width: 160px; */\n  outline: none;\n  cursor: pointer;\n    transition: all 0.4s;\n\n  &:hover,\n  &:focus {\n    outline:none;\n    background-color: var(--green);\n    color: var(--background-color);\n    box-shadow: var(--shadow-two); \n\n    & >svg {\n        fill: var(--background-color);\n\n     }\n\n     \n     &:active {\n    transform: scale(0.98);\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n    background-image: radial-gradient(circle, #2b02a5 10%, transparent 10.01%);\n    background-repeat: no-repeat;\n    background-position: 50%;\n    transform: scale(10, 10);\n    opacity: 0;\n    transition: transform 0.4s, opacity 1s;\n  }\n\n  &:active:after {\n    transform: scale(0, 0);\n    opacity: 0.3;\n    transition: 0s;\n  }\n  }\n`;","import styled from 'styled-components';\n\nexport const MainSection = styled.section`\n    width: 280px;\n   \n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n    margin: 0;\n`\n\n\nexport const MainTitle = styled.h2`\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 50px;\n  font-size: 22px;\n  text-align: center;\n  color: #eee;\n  margin: 0;\n  padding: 8px 30px;\n  border-radius: 10px;\n  background-color: #777;\n  border: 4px solid #777;\n  box-shadow: var(--shadow-four);\n  transition: opacity 1s ease-in-out;\n\n  &>svg {\n    fill: #eee;\n    transition: opacity 1s ease-in-out;\n  }\n`","import PropTypes from 'prop-types'\nimport { MainTitle, MainSection } from './Section.styled';\n\nexport const Section = ({ title, icon, children }) => {\n    return (\n    <MainSection>\n      <MainTitle>{title}{icon} </MainTitle>\n      {children}  \n     </MainSection>)\n }\n \n Section.propTypes = {\n     title: PropTypes.string.isRequired,\n     children: PropTypes.node.isRequired,\n\n   };\n   ","import { Input, Form, Label, ContactFormBtn } from './ContactForm.styled';\nimport {iconRedux} from 'utils/svgIcons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateField, resetForm } from 'redux/formSlice';\nimport Notiflix from 'notiflix';\nimport { addContact } from 'redux/operations';\nimport { getContactsList, getForm, getLang} from 'redux/selectors';\nimport { useEffect, useState } from 'react';\nimport { langEN, langUA } from 'utils/languages';\n\n\nconst ContactForm = () => {\n\n  const contacts = useSelector(getContactsList)\n  const { name, number } = useSelector(getForm);\n  const dispatch = useDispatch()\n  const [lang, setLang] = useState(langUA)\n  const language = useSelector(getLang)\n \n  // Language\n  useEffect(() => {\n    setLang(language === 'english' ?  langEN :  langUA);\n  }, [language])\n\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    dispatch(updateField({ field: name, value }));\n  };\n\n  const handleSubmit = (e) => {\n  \n    e.preventDefault();\n\n    const newContact  = {\n      name,\n      number,\n    }\n\n    if (contacts.find((contact) => contact.name.toLowerCase() === newContact.name.toLowerCase())) {\n      Notiflix.Notify.failure(`${name} is already in contacts.`);\n      return;\n    } else if (contacts.find((contact) => contact.number === number)) {\n      Notiflix.Notify.failure(`${number} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(newContact))\n    dispatch(resetForm()); // Reset the form after submission\n  };\n\n\n  return (\n    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Label>\n      {lang.name}:\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          required\n          onChange={handleChange}\n        />\n      </Label>\n      <Label>\n      {lang.number}:\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number}\n          required\n          onChange={handleChange}\n        />\n      </Label>\n      <ContactFormBtn \n      type=\"submit\"\n            >\n              {lang.add}{ language === 'english' && iconRedux }</ContactFormBtn>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n\n","import styled from 'styled-components';\n\n\nexport const FilterLabel = styled.label`\n    transition: color 1s ease-in-out;\n    color: var(--text-color);\n\n  & >input{\n      \n\n\n    &:disabled {\n      border: none;\n      outline: none;\n      cursor: none;\n\n \n      background-color: var(--chamomile);\n      &::placeholder {\n        color: transparent;\n      }\n    }\n  }\n`;","import { useEffect, useState } from 'react';\nimport { Input } from '../ContactForm/ContactForm.styled';\nimport { FilterLabel } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice';\nimport { langEN, langUA } from 'utils/languages';\nimport { getLang } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch()\n  const contacts = useSelector(state =>  state.contacts.contactsList)\n  const [lang, setLang] = useState(langUA)\n  const language = useSelector(getLang)\n \n  // Language\n  useEffect(() => {\n    setLang(language === 'english' ?  langEN :  langUA);\n  }, [language])\n \n  return(\n    <>\n    <FilterLabel>\n      {contacts.length === 0 \n      ? lang.empty\n      : lang.find}\n      <Input\n        className='filter__field'\n        type=\"text\"\n        onChange={(e) => dispatch(filterContacts(e.target.value))}\n        disabled={contacts.length === 0}\n \n      />\n    </FilterLabel>\n  </>\n\n  )\n}\n\n","import styled, { css, keyframes } from 'styled-components';\nimport baseLiStyles from '../ContactForm/ContactForm.styled';\nimport { myRippleStyles } from '../ContactForm/ContactForm.styled';\n\nconst ulAnimation = keyframes`\n    0% {\n        transform: rotateX(-90deg)\n    }\n    70% {\n        transform: rotateX(20deg) \n    }\n    100% {\n        transform: rotateX(0deg) \n    }\n\n`\n\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  list-style-type: disc;\n\n\n  font-size: 18px;\n  font-weight: 500;\n  margin: 0;\n  padding: 0;\n\n   animation: ${ulAnimation} 1s ease;   \n`;\n\nexport const ListItem = styled.li`\n\n\n    /* set up the animation */\n    animation-duration: 0.5s;\n    animation-fill-mode: both;\n  \n    \n    /* use a css helper function to generate the delay */\n    ${({ totalItems }) => css`\n      ${Array.from({ length: totalItems }, (_, i) => css`\n        &:nth-child(${i + 1}) {\n          animation-delay: ${0.25 * (i + 1)}s;\n        }\n      `)}\n    `}\n\n   display: grid;\n   gap: 8px; \n   padding: 8px 10px;  \n\n  @media screen and (min-width: 768px) {\n    grid-template-columns:  auto 200px;\n    }\n`;\n\nexport const ItemCard = styled.span`\n  \n  display: flex;\n  align-items: center;\n  min-height: 40px;\n  border-radius: 4px;\n  padding:4px 16px;\n  font-weight: 600;\n  color: var(--footer-text-color);\n  background-color: var(--lauren);\n\n  box-shadow: var(--shadow-four);    \n\n  @media screen and (min-width: 768px) {\n   justify-self: flex-start !important;\n    }\n`;\n\n\nexport const EditWrapper = styled.div`\n\n  display: grid;\n  grid-gap: 8px;\n\n  &>input {\n    width: 250px;\n    padding: 4px 8px;\n    border-radius: 4px;\n    border: transparent;\n    background-color: var(--beige);\n    outline: none;\n\n    &:active,\n  &:focus {\n   outline: 1px solid var(--orange);\n  }\n  }\n`\n\nexport const ContactContainer = styled.div`\n  position: relative;\n  width: 320px;\n  max-height: 480px;\n  padding: 4px 2px;\n  border: 3px solid var(--teal);\n  background-color: #eee5;\n  border-radius: 16px;\n  box-shadow: var(--shadow-four);\n  overflow: auto;\n  transition: 1s ease-in-out;\n  /* ::-webkit-scrollbar {\n    display: none;\n} */\n\n::-webkit-scrollbar {\n    width: 12px;\n}\n \n::-webkit-scrollbar-track {\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); \n    border-radius: 10px;\n}\n \n::-webkit-scrollbar-thumb {\n    border-radius: 10px;\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5); \n}\n\n@media screen and (min-width: 768px) {\n      width: 700px;\n      padding: 4px 8px;\n      max-height: 280px;\n    }\n`;\n\nexport const BtnWrapper = styled.div`\n  display: flex;\n  gap: 8px;\n\n`\n\nexport const BtnDelete = styled.button`\n   ${baseLiStyles};\n  \n    font-size: var(--fz);\n   justify-content: center;\n   width: 100px;\n   /* background-color: var(--red); */\n   cursor: pointer;\n    transition: all 0.4s;\n    padding: 2px;\n\n  &:hover,\n  &:focus {\n    outline:none;\n    background-color: var(--red);\n    color: var(--background-color);\n    box-shadow: var(--shadow-two); \n\n    .cardSpan{\n        color: var(--crimson);\n        box-shadow: var(--shadow-two); \n    }\n    ${myRippleStyles}\n  }\n`\nexport const BtnEdit = styled.button`\n   ${baseLiStyles};\n\n   font-size: var(--fz);\n   justify-content: center;\n   width: 100px;\n   transition: opacity 1s ease-in-out;\n   \n   cursor: pointer;\n    transition: all 0.4s;\n    padding: 2px;\n\n  &:hover,\n  &:focus {\n    outline:none;\n    background-color: var(--green);\n    color: var(--background-color);\n    box-shadow: var(--shadow-two); \n\n    .cardSpan{\n        color: var(--crimson);\n        box-shadow: var(--shadow-two); \n    }\n    ${myRippleStyles}\n  }\n`\nexport const EmptySpan = styled.span`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  padding: 20px;\n  font-size: 24px;\n  font-weight: 600;\n  color: #333;\n\n\n`\n\nexport const Count  = styled.span`\nposition: absolute;\ntop: 485px;\nright: 50%;\ntransform: translateX(140px);\nwidth: 46px;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n\nbackground-color: var(--orange);\npadding: 12px;\nborder-radius: 50%;\ncolor: #555;\nfont-weight: 800;\nletter-spacing: 1px;\nz-index: 10;\n\n\n`","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BtnDelete, BtnEdit, BtnWrapper, EditWrapper, ItemCard, ListItem } from 'components/ContactList/ContactList.styled';\nimport { useState } from 'react';\nimport { confirmDelete, confirmUpdate } from 'utils/notifier';\nimport { useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { deleteContact } from 'redux/operations';\nimport { getContactsList, getLang } from 'redux/selectors';\nimport { editContact } from 'redux/operations';\nimport { langEN, langUA } from 'utils/languages';\n// import { IDspan } from './ContactListItem.styled';\n\n\nexport default function ContactListItem({ contact }) {\n  const dispatch = useDispatch();\n  const contactsList  = useSelector(getContactsList )\n  const { id, name, number} = contact;\n\n  const [isEdit, setIsEdit] = useState(false)\n  const [nick, setNick] = useState(name)\n  const [phone, setPhone] = useState(number)\n  const [lang, setLang] = useState(langUA)\n  const language = useSelector(getLang)\n \n  // Language\n  useEffect(() => {\n    setLang(language === 'english' ?  langEN :  langUA);\n  }, [language])\n\n\n  const handleEdit = () => {\n    setIsEdit(prev => !prev )\n \n    if (isEdit) {\n      const updatedContact = {\n        id,\n        name: nick,\n        number: phone,\n      };\n \n\nconsole.log('updatedContact' , updatedContact );\nconst contactToUpdate  = contactsList.find(contact => contact.id === updatedContact.id)\nconsole.log('contactToUpdate',contactToUpdate)\n\nconst allExeptUpdated = contactsList.filter(contact => contact.id !== contactToUpdate.id)\n// console.log('allExeptUpdated',allExeptUpdated)\n\nconst returnDefault =() =>{\n  setNick(contactToUpdate.name)\n  setPhone(contactToUpdate.number)\n}  \n\nif(updatedContact.name === '' || updatedContact.number === ''){\n  Notiflix.Notify.failure('No Empty Strings, dude!');\n  returnDefault()\n  return;\n}\n\nif (allExeptUpdated.find((contact) => contact.name.toLowerCase() === updatedContact.name.toLowerCase())){\n  Notiflix.Notify.failure(`${updatedContact.name} is already in contacts.`);\n  returnDefault()\n  return ;\n}\n\nelse if (allExeptUpdated.find((contact) => contact.number === updatedContact.number)) {\n  Notiflix.Notify.failure(`${updatedContact.number} is already in contacts.`);\n  returnDefault() \n  return ;\n}\n\n\nconfirmUpdate(`Are you sure you want to update ${name}?`, name)\n  .then(() => {\n    dispatch(editContact(updatedContact));\n  })\n  .catch(() => {\n    // Handle cancellation or rejection\n  });\n\n    }\n  };\n\n  const handleDelete = () => {\n\n    confirmDelete(`Are you sure you want to delete ${name}?`, name)\n  .then(() => {\n    dispatch(deleteContact(id))\n  })\n  .catch(() => {\n    // Handle cancellation or rejection\n  });\n\n  };\n\n  // const handleChange = (e) => {\n  //   const { name, value } = e.target;\n  //   dispatch(updateValue({ field: name, value }));\n  // };\n\n  const handleChange =(e) =>{\n\n    const{name, value} =e.currentTarget\n    switch (name) {\n        case 'nick':\n            setNick(value)\n            break;\n        case 'phone':\n            setPhone(value)\n            break;\n    \n        default:\n            break;\n    }\n}\n\n\n  return (\n    <ListItem totalItems={4}>\n      {/* <IDspan>{id}</IDspan> */}\n      {isEdit ? (\n        <EditWrapper className=\"edit-wrapper\">\n          <input type=\"text\" name=\"nick\" value={nick} onChange={handleChange} />\n          <input type=\"text\" name=\"phone\" value={phone} onChange={handleChange} />\n        </EditWrapper>\n      ) : (\n        \n        <ItemCard className=\"cardSpan\">\n          {contact.name}: {contact.number}\n        </ItemCard>\n      )}\n\n      <BtnWrapper className=\"button-wrapper\">\n        <BtnEdit type=\"button\" onClick={handleEdit}>\n        {isEdit  ? 'Save' : lang.edit}\n        </BtnEdit>\n\n        <BtnDelete \n      \n        type=\"button\" onClick={handleDelete}>\n          {lang.delete}\n        </BtnDelete>\n      </BtnWrapper>\n    </ListItem>\n  );\n}","import Notiflix, { Confirm } from 'notiflix';\n\n\nexport function confirmUpdate (question, name) {\n\n        return new Promise((resolve, reject) => {\n            Confirm.show(\n              'Notiflix Confirm',\n              question,\n              'Yes',\n              'No',\n              () => {\n                // Notiflix.Notify.success(`Contact ${name} was updated.`);\n                resolve();\n              },\n              () => {\n                Notiflix.Notify.info(`Contact ${name} remained same.`);\n                reject();\n              },\n              {}\n            );\n          });\n\n}\n\nexport function confirmDelete (question, name) {\n\n        return new Promise((resolve, reject) => {\n            Confirm.show(\n              'Notiflix Confirm',\n              question,\n              'Yes',\n              'No',\n              () => {\n                Notiflix.Notify.warning(`Contact ${name} was deleted.`);\n                resolve();\n              },\n              () => {\n                Notiflix.Notify.info(`Contact ${name} remained same.`);\n                reject();\n              },\n              {}\n            );\n          });\n\n}\n\n","import { List,  ContactContainer, EmptySpan , Count} from './ContactList.styled';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { getContactsList , getContactsFilter, getSorted} from 'redux/selectors';\nimport { arrayOfMethods} from 'redux/selectors';\n\n\nexport const ContactList = () => {\n\n  const contacts = useSelector(getContactsList)\n  const filterValue = useSelector(getContactsFilter)\n  const {activeIndex, id,  name, number}  = useSelector(getSorted)\n  const arrayOfBools = [id,  name, number]\n\n  // console.log(arrayOfMethods[sorted.activeIndex]);\n  // console.log(arrayOfBools[sorted.activeIndex])\n \n  const sortedContacts = arrayOfMethods[activeIndex]\n\n  const filteredContacts = [...sortedContacts(contacts, arrayOfBools[activeIndex])\n    .filter((contact )=>\n     contact.name.toLowerCase().includes(filterValue.filter) \n     || contact.number.includes(filterValue.filter) )]\n\n\n  return (\n    <>\n      <Count>{filteredContacts.length}</Count> \n      {filteredContacts.length !== 0\n      ?(\n        <ContactContainer>\n          {/* <Count>{contacts.length}</Count> */}\n          <List>\n            {filteredContacts.map((contact) => {\n      \n              return (\n              <ContactListItem\n              key={contact.id}\n              contact = {contact}\n              ></ContactListItem>\n              );\n            })}\n          </List>\n        </ContactContainer>\n      )\n      :<ContactContainer>\n        <EmptySpan>No match to this query\n          </EmptySpan>\n      </ContactContainer>}\n    </>\n  );\n};\n\n","import styled from 'styled-components';\n\nexport const StyledListBar = styled.div`\nwidth: 280px;\ndisplay: grid;\ngap: 4px;\ngrid-template-columns: repeat(4, 1fr);\n`\n\nexport  const SortBtns = styled.button`\npadding: 8px;\nborder-radius: 6px;\nborder: transparent;\nbackground-color: #888;\ncolor: #eee;\nfont-weight: 600;\nletter-spacing: 2px;\ntransition: 0.2s ease;\n\n&:active,\n&:focus {\n    background-color: var(--blue);\n    box-shadow: var(--shadow-four);\n}\n`","// import { useSelector } from \"react-redux\"\nimport { StyledListBar, SortBtns } from \"./ListBar.styled\"\n// import { getSorted } from \"redux/selectors\"\nimport { toggleSortId,  toggleSortName, toggleSortNUmber } from \"redux/sortSlice\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useEffect, useState } from \"react\"\nimport { langEN, langUA } from \"utils/languages\"\nimport { getLang } from \"redux/selectors\"\n\nconst ListBar = () => {\n\n    const [lang, setLang] = useState(langUA)\n    const language = useSelector(getLang)\n   \n    // Language\n    useEffect(() => {\n      setLang(language === 'english' ?  langEN :  langUA);\n    }, [language])\n\n    const dispatch = useDispatch()\n\n    const sortById = () =>{   \n        dispatch(toggleSortId()) \n    }\n\n    const sortByName = () =>{\n        dispatch(toggleSortName()) \n    }\n\n    const sortByNumber = () =>{\n        dispatch(toggleSortNUmber()) \n    }\n\n\n  return (\n    <StyledListBar>\n        <SortBtns onClick={sortById}>id</SortBtns>\n        <SortBtns onClick={sortByName}> {lang.name} </SortBtns>\n        <SortBtns onClick={sortByNumber}> {lang.phone} </SortBtns>\n    </StyledListBar>\n  )\n}\n\nexport default ListBar","// import { Container } from '../components/container/Container';\nimport { Section } from \"../components/section/Section\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport ListBar from 'components/ListBar/ListBar';\nimport {  useDispatch, useSelector } from 'react-redux';\nimport { iconMphone } from 'utils/svgIcons';\nimport { getContactsList, getLang } from 'redux/selectors';\nimport { fetchContacts } from \"redux/operations\";\nimport { useEffect, useState } from \"react\";\nimport { PhonebookWrapper } from \"./Pages.styled\";\nimport { langEN, langUA } from \"utils/languages\";\n\n\n const Phonebook = () => {\n  const dispatch = useDispatch()\n  const contacts = useSelector(getContactsList)\n  const [lang, setLang] = useState(langUA)\n  const language = useSelector(getLang)\n \n  // Language\n  useEffect(() => {\n    setLang(language === 'english' ?  langEN :  langUA);\n  }, [language])\n  \n  useEffect(() => {\n    dispatch(fetchContacts())\n  \n  }, [dispatch] )\n  \n  return (\n    <PhonebookWrapper className=\"phonebook__wrap\">\n    <Section title={lang.phonebook} icon ={language === 'english' &&   iconMphone}>\n      <ContactForm  />\n\n      <Filter />\n      \n      {contacts.length > 0 && (\n        <>\n       <ListBar></ListBar>\n        <ContactList  />\n        </>\n      )}\n    </Section>\n\n  </PhonebookWrapper>\n  )\n}\n\nexport default Phonebook\n"],"names":["baseLiStyles","css","myRippleStyles","Input","styled","Form","Label","ContactFormBtn","MainSection","MainTitle","Section","title","icon","children","contacts","useSelector","getContactsList","getForm","name","number","dispatch","useDispatch","useState","langUA","lang","setLang","language","getLang","useEffect","langEN","handleChange","e","target","value","updateField","field","autoComplete","onSubmit","preventDefault","newContact","find","contact","toLowerCase","Notiflix","addContact","resetForm","type","pattern","required","onChange","add","iconRedux","FilterLabel","Filter","state","contactsList","length","empty","className","filterContacts","disabled","ulAnimation","keyframes","List","ListItem","totalItems","Array","from","_","i","ItemCard","EditWrapper","ContactContainer","BtnWrapper","BtnDelete","BtnEdit","EmptySpan","Count","ContactListItem","id","isEdit","setIsEdit","nick","setNick","phone","setPhone","currentTarget","onClick","prev","updatedContact","console","log","contactToUpdate","allExeptUpdated","filter","returnDefault","question","Promise","resolve","reject","Confirm","confirmUpdate","then","editContact","catch","edit","confirmDelete","deleteContact","delete","ContactList","filterValue","getContactsFilter","getSorted","activeIndex","arrayOfBools","sortedContacts","arrayOfMethods","filteredContacts","includes","map","StyledListBar","SortBtns","toggleSortId","toggleSortName","toggleSortNUmber","fetchContacts","phonebook","iconMphone"],"sourceRoot":""}