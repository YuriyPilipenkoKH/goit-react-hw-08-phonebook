{"version":3,"file":"static/js/783.14c8067d.chunk.js","mappings":"+SAIaA,EAAgBC,EAAAA,GAAAA,IAAH,0RAabC,EAAUD,EAAAA,GAAAA,IAAH,uUAkBPE,EAAaF,EAAAA,GAAAA,KAAH,4DAIVG,EAAYH,EAAAA,GAAAA,MAAH,iIAOTI,EAAYJ,EAAAA,GAAAA,MAAH,qHAOTK,EAAUL,EAAAA,GAAAA,IAAH,4OAcPM,GAAaN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,wX,oBC5DVQ,EAAW,WACpB,OAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,CACrCG,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,SAAU,KALd,eAAOC,EAAP,KAAiBC,EAAjB,KAQQC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MACdJ,GAAY,kBACPD,GADM,cAERL,EAAOU,IAEX,EAoBL,OACE,UAACvB,EAAD,YACI,UAACE,EAAD,CAASsB,UAAU,UAAnB,WACI,gBAAKC,IAAI,SACT,4BAAQ,mBAEZ,UAACtB,EAAD,CAAYuB,SAxBO,SAACL,GACpBA,EAAEM,iBAEFC,QAAQC,IAAI,aAAcX,GAE1BC,EAAY,CACVN,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,SAAU,IAEb,EAYC,WACG,UAACb,EAAD,CAAW0B,QAAQ,OAAnB,UAA0B,SAC3B,SAACzB,EAAD,CACE0B,KAAK,OACLC,GAAG,OACHnB,KAAK,OACLU,MAAOL,EAASL,KAChBoB,SAAUb,EACVc,UAAQ,QAGV,UAAC9B,EAAD,CAAW0B,QAAQ,QAAnB,UAA2B,UAC3B,SAACzB,EAAD,CACE0B,KAAK,QACLC,GAAG,QACHnB,KAAK,QACLU,MAAOL,EAASJ,MAChBmB,SAAUb,EACVc,UAAQ,QAGV,UAAC9B,EAAD,CAAW0B,QAAQ,WAAnB,UAA8B,aAC9B,SAACzB,EAAD,CACE0B,KAAK,OACLC,GAAG,WACHnB,KAAK,WACLU,MAAOL,EAASH,SAChBkB,SAAUb,EACVc,UAAQ,QAGV,UAAC9B,EAAD,CAAW0B,QAAQ,QAAnB,UAA2B,UAC3B,SAACzB,EAAD,CACE0B,KAAK,MACLC,GAAG,QACHnB,KAAK,QACLU,MAAOL,EAASF,MAChBiB,SAAUb,EACVc,UAAQ,QAGT,UAAC9B,EAAD,CAAW0B,QAAQ,WAAnB,UAA8B,aAC/B,SAACzB,EAAD,CACE0B,KAAK,OACLC,GAAG,WACHnB,KAAK,WACLU,MAAOL,EAASD,SAChBgB,SAAUb,EACVc,UAAQ,WAMZ,SAAC5B,EAAD,CAAUkB,UAAU,UAApB,UACE,mBACAA,UAAU,UACVO,KAAK,SAFL,SAEc,YAGhB,SAACxB,EAAD,CAAY4B,QAtEK,WACjBvB,GAAaD,EAEhB,EAmEG,SACUA,EAAqByB,EAAAA,GAAVC,EAAAA,OAK5B,ECvFD,EApBgB,WACZ,OAAwB3B,EAAAA,EAAAA,UAAS4B,EAAAA,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAM/B,OAHEC,EAAAA,EAAAA,YAAU,WACRJ,EAAqB,YAAbC,EAA0BI,EAAAA,EAAUP,EAAAA,EAC7C,GAAE,CAACG,KAEJ,UAAC,KAAD,YACA,SAAC,KAAD,UACEF,EAAKO,WAER,SAACrC,EAAD,MAKF,C","sources":["components/UserForm/UserForm.styled.jsx","components/UserForm/UserForm.jsx","pages/Profile.jsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n\nexport const FormContainer = styled.div`\n    position: relative;\n    width: 280px;\n    height: 517px;\n    padding: 20px 16px;\n    display: grid;\n    grid-template-rows: 224px auto 31px;\n    gap: 20px;\n    background-color: #fff;\n    border-radius: 20px;\n    outline: 2px solid #777;\n    \n`\nexport const ImgWrap = styled.div`\n    display: grid;\n    gap: 16px;\n    justify-content: center;\n\n    &>img {\n        width: 180px;\n        height: 180px;\n        border-radius: 20px;\n        background-color: #888;\n    }\n    &>button{\n        width: 80px;\n        justify-self: center;\n        border-radius:8px;\n    }\n\n`\nexport const FormStyled = styled.form`\n    display: grid;\n    gap: 16px;\n`\nexport const FormLabel = styled.label`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n`\n\nexport const FormInput = styled.input`\n    width: 180px;\n    height: 24px;\n    outline: 2px solid #29f;\n    border-radius: 8px;\n`\n\nexport const BtnWrap = styled.div`\n    display: flex;\n    width: 100%;\n\n\n    &>button.saveBtn {\n        width: 248px;\n        height: 31px;\n        border-radius:16px;\n        cursor: pointer;\n        padding: 4px 32px;\n        \n    }\n`\nexport const FormEditor = styled(NavLink)`\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    cursor: pointer;\n    transition: all 1s ease-in-out;\n    @media screen and (min-width: 768px) {\n        top: 20px;\n        right: 20px;\n    }\n\n    & > svg {\n        fill: blue;\n    }\n    & > svg.iconCross {\n        transition: all 1s ease-in-out;\n        stroke: #333;\n    }\n`;","import { useState } from \"react\";\nimport { BtnWrap, FormContainer, FormEditor, FormInput, FormLabel, FormStyled, ImgWrap } from \"./UserForm.styled\"\nimport { IconCrossForSearch, iconPen } from \"utils/svgIcons\";\n\n\n\n \nexport const UserForm = () => {\n    const [showData, setShowData] = useState(false);\n    const [formData, setFormData] = useState({\n        name: '',\n        email: '',\n        birthday: '',\n        phone: '',\n        location: '',\n      });\n    \n      const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData({\n          ...formData,\n          [name]: value,\n        });\n      };\n    \n      const handleSubmit = (e) => {\n        e.preventDefault();\n        // Here, you can perform actions with the form data, like sending it to an API or processing it.\n        console.log('Form Data:', formData);\n        // Clear the form fields after submission (optional)\n        setFormData({\n          name: '',\n          email: '',\n          birthday: '',\n          phone: '',\n          location: '',\n        });\n      };\n\n      const handleData = () => {\n        setShowData(!showData);\n        \n    };\n  return (\n    <FormContainer>\n        <ImgWrap className=\"ImgWrap\">\n            <img alt='alt'/>\n            <button>edit photo</button>\n        </ImgWrap>\n        <FormStyled onSubmit={handleSubmit}>\n           <FormLabel htmlFor=\"name\">Name:\n          <FormInput\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            required\n          />\n          </FormLabel>\n          <FormLabel htmlFor=\"email\">Email:\n          <FormInput\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n          />\n          </FormLabel>\n          <FormLabel htmlFor=\"birthday\">Birthday:\n          <FormInput\n            type=\"text\"\n            id=\"birthday\"\n            name=\"birthday\"\n            value={formData.birthday}\n            onChange={handleChange}\n            required\n          />\n          </FormLabel>\n          <FormLabel htmlFor=\"phone\">Phone:\n          <FormInput\n            type=\"tel\"\n            id=\"phone\"\n            name=\"phone\"\n            value={formData.phone}\n            onChange={handleChange}\n            required\n          />\n          </FormLabel>\n           <FormLabel htmlFor=\"location\">Location:\n          <FormInput\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            value={formData.location}\n            onChange={handleChange}\n            required\n          />\n           </FormLabel>\n    \n      </FormStyled>\n\n        <BtnWrap  className=\"BtnWrap\">\n          <button \n          className=\"saveBtn\"\n          type=\"submit\">Save</button>\n        </BtnWrap>\n\n        <FormEditor onClick={handleData}>\n                {!showData ? iconPen : IconCrossForSearch}\n            </FormEditor>\n      \n    </FormContainer>\n  )\n}\n\n","import { useState ,useEffect} from 'react'\nimport { HomeTitle, HomeWrapper } from './Pages.styled'\nimport { useSelector } from 'react-redux'\nimport { langEN, langUA } from 'utils/languages'\nimport { getLang } from 'redux/selectors'\nimport { UserForm } from 'components/UserForm/UserForm'\n\n\nconst Profile = () => {\n    const [lang, setLang] = useState(langUA)\n    const language = useSelector(getLang)\n   \n    // Language\n    useEffect(() => {\n      setLang(language === 'english' ?  langEN :  langUA);\n    }, [language])\n  return (\n    <HomeWrapper  >\n    <HomeTitle  >\n    { lang.profile }\n    </HomeTitle>\n   <UserForm />\n  \n\n  </HomeWrapper>\n  )\n}\n\nexport default Profile\n"],"names":["FormContainer","styled","ImgWrap","FormStyled","FormLabel","FormInput","BtnWrap","FormEditor","NavLink","UserForm","useState","showData","setShowData","name","email","birthday","phone","location","formData","setFormData","handleChange","e","target","value","className","alt","onSubmit","preventDefault","console","log","htmlFor","type","id","onChange","required","onClick","IconCrossForSearch","iconPen","langUA","lang","setLang","language","useSelector","getLang","useEffect","langEN","profile"],"sourceRoot":""}